#include "sd.h"

unsigned char SD_Init(void)
{
  unsigned short i;
  unsigned char r1;
  unsigned short retry;
  unsigned char buff[6];
  SPI_ControlLine();
  //SD卡初始化时时钟不能超过400KHz
  SPI_SetSpeed(SPI_SPEED_LOW);
  //CS为低电平，片选置低，选中SD卡
  SD_CS_ENABLE();
  //纯延时，等待SD卡上电稳定
  for(i=0; i<0xf00; i++);
  //先产生至少74个脉冲，让SD卡初始化完成
  for(i=0; i<10; i++)
  {
    //参数可随便写，经过10次循环，产生80个脉冲
    SPI_ReadWriteByte(0xff);
  }
//-----------------SD卡复位到idle状态----------------
//循环发送CMD0，直到SD卡返回0x01,进入idle状态
//超时则直接退出
  retry=0;
  do
  {
    //发送CMD0，CRC为0x95
    r1=SD_SendCommand(CMD0,0,0x95);
    retry++;
  }
  while((r1!=0x01)&&(retry<200));
  //跳出循环后，检查跳出原因，
  if(retry==200)	//说明已超时
  {
    return 1;
  }
  //如果未超时，说明SD卡复位到idle结束
  //发送CMD8命令，获取SD卡的版本信息
  r1=SD_SendCommand(CMD8,0x1aa,0x87);
  //下面是SD2.0卡的初始化
  if(r1==0x01)
  {
    // V2.0的卡，CMD8命令后会传回4字节的数据，要跳过再结束本命令
    buff[0] = SPI_ReadWriteByte(0xFF);
    buff[1] = SPI_ReadWriteByte(0xFF);
    buff[2] = SPI_ReadWriteByte(0xFF);
    buff[3] = SPI_ReadWriteByte(0xFF);
    SD_CS_DISABLE();
    //多发8个时钟
    SPI_ReadWriteByte(0xFF);
    retry = 0;
    //发卡初始化指令CMD55+ACMD41
    do
    {
      r1 = SD_SendCommand(CMD55, 0, 0);
      //应返回0x01
      if(r1!=0x01)
        return r1;
      r1 = SD_SendCommand(ACMD41, 0x40000000, 1);
      retry++;
      if(retry>200)
        return r1;
    }
    while(r1!=0);
    //初始化指令发送完成，接下来获取OCR信息
    //----------鉴别SD2.0卡版本开始-----------
    //读OCR指令
    r1 = SD_SendCommand_NoDeassert(CMD58, 0, 0);
    //如果命令没有返回正确应答，直接退出，返回应答
    if(r1!=0x00)
      return r1;
    //应答正确后，会回传4字节OCR信息
    buff[0] = SPI_ReadWriteByte(0xFF);
    buff[1] = SPI_ReadWriteByte(0xFF);
    buff[2] = SPI_ReadWriteByte(0xFF);
    buff[3] = SPI_ReadWriteByte(0xFF);
    //OCR接收完成，片选置高
    SD_CS_DISABLE();
    SPI_ReadWriteByte(0xFF);
    //检查接收到的OCR中的bit30位（CSS），确定其为SD2.0还是SDHC
    //CCS=1：SDHC   CCS=0：SD2.0
    if(buff[0]&0x40)
    {
      SD_Type = SD_TYPE_V2HC;
    }
    else
    {
      SD_Type = SD_TYPE_V2;
    }
    //-----------鉴别SD2.0卡版本结束-----------
    SPI_SetSpeed(1); 		//设置SPI为高速模式
  }
}

unsigned char SD_ReceiveData(unsigned char *data, unsigned short len, unsigned char release)
{
   unsigned short retry;
   unsigned char r1;
   //启动一次传输
   SD_CS_ENABLE();
   retry = 0;										   
   do
   {
      r1 = SPI_ReadWriteByte(0xFF);		
      retry++;
      if(retry>4000)  //4000次等待后没有应答，退出报错（可多试几次）
   {
   SD_CS_DISABLE();
   return 1;
   }
}
  //等待SD卡发回数据起始令牌0xFE
  while(r1 != 0xFE);	
  //跳出循环后，开始接收数据
  while(len--)
  {
   *data = SPI_ReadWriteByte(0xFF);
   data++;
  }
  //发送2个伪CRC
  SPI_ReadWriteByte(0xFF);
  SPI_ReadWriteByte(0xFF);
  //按需释放总线
  if(release == RELEASE)
  {
    SD_CS_DISABLE();
    SPI_ReadWriteByte(0xFF);
  }											  		
  return 0;
}

unsigned char  SD_SendCommand(unsigned char cmd,unsigned int arg,unsigned char crc)
{
   unsigned char r1;
   unsigned int Retry = 0;
   SD_CS_DISABLE();
   //发送8个时钟，提高兼容性
   SPI_ReadWriteByte(0xff);	
   //选中SD卡
   SD_CS_ENABLE();		
   /*按照SD卡的命令序列开始发送命令 */
   //cmd参数的第二位为传输位，数值为1，所以或0x40  
   SPI_ReadWriteByte(cmd | 0x40);    
   //参数段第24-31位数据[31..24]
   SPI_ReadWriteByte((unsigned char)(arg >> 24));
   //参数段第16-23位数据[23..16]	
   SPI_ReadWriteByte((unsigned char)(arg >> 16));
   //参数段第8-15位数据[15..8]	
   SPI_ReadWriteByte((unsigned char)(arg >> 8));	
   //参数段第0-7位数据[7..0]
   SPI_ReadWriteByte((unsigned char)arg);    
   SPI_ReadWriteByte(crc);
   //等待响应或超时退出
   while((r1 = SPI_ReadWriteByte(0xFF))==0xFF)
   {
     Retry++;
     if(Retry > 800)	break; 	//超时次数
   }   
   //关闭片选
   SD_CS_DISABLE();		
   //在总线上额外发送8个时钟，让SD卡完成剩下的工作
   SPI_ReadWriteByte(0xFF); 	
   //返回状态值	
   return r1;		
}

unsigned char SD_SendCommand_NoDeassert(unsigned char cmd, unsigned int arg,unsigned char crc)
{
   unsigned char r1;
   unsigned int Retry = 0;
   SD_CS_DISABLE();
   //发送8个时钟，提高兼容性
   SPI_ReadWriteByte(0xff);		
   //选中SD卡
   SD_CS_ENABLE();		
   /* 按照SD卡的命令序列开始发送命令 */
   SPI_ReadWriteByte(cmd | 0x40);                      
   SPI_ReadWriteByte((unsigned char)(arg >> 24));
   SPI_ReadWriteByte((unsigned char)(arg >> 16));
   SPI_ReadWriteByte((unsigned char)(arg >> 8));
   SPI_ReadWriteByte((unsigned char)arg);    
   SPI_ReadWriteByte(crc);
   //等待响应或超时退出
   while((r1 = SPI_ReadWriteByte(0xFF))==0xFF)
   {
      Retry++;
      if(Retry > 800)break; 
    }
    return r1;
}

unsigned char SD_GetCID(unsigned char *cid_data)
{
   unsigned char r1;
   //发CMD10命令，读取CID信息
   r1 = SD_SendCommand(CMD10, 0, 0xFF);
   if(r1 != 0x00)	
   return r1;  	//响应错误，退出 
   //接收16个字节的数据
   SD_ReceiveData(cid_data, 16, RELEASE);	 
   return 0;
}

unsigned int SD_GetCapacity(void)
{
    unsigned char csd[16];
    unsigned int Capacity;
    unsigned char r1;
    unsigned short i;
    unsigned short temp;
    //取CSD信息，如果出错，返回0
    if(SD_GetCSD(csd)!=0) 	
    return 0;	    
    //如果是CSD寄存器是2.0版本，按下面方式计算
    if((csd[0]&0xC0)==0x40)
    {									  
       Capacity=((unsigned int)csd[8])<<8;
       Capacity+=(unsigned int)csd[9]+1;	 
       Capacity = (Capacity)*1024;	//得到扇区数
       Capacity*=512;	//得到字节数   
    }
    else		//CSD寄存器是1.0版本
   {		    
       i = csd[6]&0x03;
       i<<=8;
       i += csd[7];
       i<<=2;
       i += ((csd[8]&0xc0)>>6);
       r1 = csd[9]&0x03;
       r1<<=1;
       r1 += ((csd[10]&0x80)>>7);	 
       r1+=2;
       temp = 1;
       while(r1)
       {
        temp*=2;
         r1--;
       }
   Capacity = ((unsigned int)(i+1))*((unsigned int)temp);	 
   i = csd[5]&0x0f;
   temp = 1;
   while(i)
   {
      temp*=2;
      i--;
   }
   //最终结果
   Capacity *= (unsigned int)temp;		
   //字节为单位  
  }
   return (unsigned int)Capacity;
}

unsigned char SD_ReadSingleBlock(unsigned int sector, unsigned char *buffer)
{
  unsigned char r1;
  //高速模式
  SPI_SetSpeed(SPI_SPEED_HIGH);
  if(SD_Type!=SD_TYPE_V2HC)	//如果不是SDHC卡
  {
    sector = sector<<9;	//512*sector即物理扇区的边界对其地址
  }
   r1 = SD_SendCommand(CMD17, sector, 1);	//发送CMD17 读命令
   if(r1 != 0x00)	return r1; 		   							  
   r1 = SD_ReceiveData(buffer, 512, RELEASE);	//一个扇区为512字节
   if(r1 != 0)
     return r1;   //读数据出错
   else 
     return 0; 		//读取正确，返回0
}

unsigned char SD_ReadMultiBlock(unsigned int sector, unsigned char *buffer, unsigned char count)
{
  unsigned char r1;	 			 
  SPI_SetSpeed(SPI_SPEED_HIGH);
  if(SD_Type != SD_TYPE_V2HC)
  {
    	sector = sector<<9;
  } 
  r1 = SD_SendCommand(CMD18, sector, 1);		//读多块命令
  if(r1 != 0x00)	return r1;	 
  do	//开始接收数据 
  {
    	if(SD_ReceiveData(buffer, 512, NO_RELEASE) != 0x00)
    	{
       		break;
    	}
    	buffer += 512;
  	      } 	while(--count);		 
  
  SD_SendCommand(CMD12, 0, 1);	//全部传输完成，发送停止命令
  SD_CS_DISABLE();	//释放总线
  SPI_ReadWriteByte(0xFF);    
  if(count != 0)
    return count;   //如果没有传完，返回剩余个数
  else 
    return 0;	
}


unsigned char SD_WaitReady(void)
{
  unsigned char r1;
  unsigned short retry=0;
  do
  {
    r1 = SPI_ReadWriteByte(0xFF);
    retry++;
    if(retry==0xfffe)
    	return 1; 
  }while(r1!=0xFF); 
    	return 0;
}

unsigned char SD_WriteSingleBlock(unsigned int sector, const unsigned char *data)
{
  	unsigned char r1;
  	unsigned short i;
  	unsigned short retry;
  //高速模式
  	SPI_SetSpeed(SPI_SPEED_HIGH);
	//如果不是SDHC卡，将sector地址转为byte地址
        if(SD_Type!=SD_TYPE_V2HC)		
  	{
     		sector = sector<<9;
  	}
	//写扇区指令
        r1 = SD_SendCommand(CMD24, sector, 0x00);	
  	if(r1 != 0x00)
  	{
		//应答错误，直接返回
    		return r1;  
  	}
	//开始准备数据传输
        SD_CS_ENABLE();	
  	//先发3个空数据，等待SD卡准备好
  	SPI_ReadWriteByte(0xff);
  	SPI_ReadWriteByte(0xff);
  	SPI_ReadWriteByte(0xff);
  	//放起始令牌0xFE
        SPI_ReadWriteByte(0xFE);
        //发一个sector数据
  	for(i=0;i<512;i++)
  	{
     		SPI_ReadWriteByte(*data++);
  	}
  	//发送2个伪CRC校验
  	SPI_ReadWriteByte(0xff);
  	SPI_ReadWriteByte(0xff);
  	//等待SD卡应答
  	r1 = SPI_ReadWriteByte(0xff);
	//如果为0x05说明数据写入成功
  	if((r1&0x1F)!=0x05)		
  	{
     		SD_CS_DISABLE();
     		return r1;
  	}
    	//等待操作完成
  	retry = 0;
        //卡自编程时，数据线被拉低
  	while(!SPI_ReadWriteByte(0xff))		
  	{
     		retry++;
     		if(retry>65534)        //如果长时间没有写入完成，退出报错
     		{
        		SD_CS_DISABLE();
        		return 1;           //写入超时，返回1
     		}
  	}
        //写入完成，片选置1
  	SD_CS_DISABLE();
  	SPI_ReadWriteByte(0xff);
        return 0;
}

unsigned char SD_WriteMultiBlock(unsigned int sector, const unsigned char *data, unsigned char count)
{
  	unsigned char r1;
  	unsigned short i;	 		 
  	SPI_SetSpeed(SPI_SPEED_HIGH); 
  	if(SD_Type != SD_TYPE_V2HC)
        {
    	    sector = sector<<9;
        }
  	if(SD_Type != SD_TYPE_MMC) 
        {
	      //启用ACMD23指令使能预擦除
    	     r1 = SD_SendCommand(ACMD23, count, 0x01);		 
        }  
        //写多块指令CMD25
        r1 = SD_SendCommand(CMD25, sector, 0x01);	
        //应答不正确，直接返回
  	if(r1 != 0x00)	return r1;	
	//开始准备数据传输
  	SD_CS_ENABLE();
	//放3个空数据让SD卡准备好		
	SPI_ReadWriteByte(0xff);	
  	SPI_ReadWriteByte(0xff); 
        SPI_ReadWriteByte(0xff);   
  	//下面是N个sector循环写入的部分
  	do
  	{
    	    //放起始令牌0xFC，表明是多块写入
     	    SPI_ReadWriteByte(0xFC);	  
     	    //发1个sector的数据
     	    for(i=0;i<512;i++)
     	    {
        	SPI_ReadWriteByte(*data++);
     	    }
     	    //发2个伪CRC
	    SPI_ReadWriteByte(0xff);
    	    SPI_ReadWriteByte(0xff);
            //等待SD卡回应
     	    r1 = SPI_ReadWriteByte(0xff);
	    //0x05表示数据写入成功
     	    if((r1&0x1F)!=0x05)			
     	    {
        	SD_CS_DISABLE();    
        	return r1;
     	    }
            //检测SD卡忙信号
     	    if(SD_WaitReady()==1)
     	   {
        	SD_CS_DISABLE();    //长时间写入未完成，退出
        	return 1;
     	   }	   
       } 
       while(--count);	
       //发送传输结束令牌0xFD
       SPI_ReadWriteByte(0xFD);	
       //等待准备好   
       if(SD_WaitReady()) 		
       {
           SD_CS_DISABLE();
           return 1;  
        }
       //写入完成，片选置1
       SD_CS_DISABLE();
       SPI_ReadWriteByte(0xff);
       //返回count值，如果写完，则count=0,否则count=未写完的sector数  
       return count;   
}